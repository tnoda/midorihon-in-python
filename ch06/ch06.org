#+TITLE: 緑本 in Python (5): 第6章
#+OPTIONS: num:nil
#+PROPERTY: header-args:ipython  :session ch06 :exports both :results value silent
#+PROPERTY: header-args          :cache yes

[[http://hosho.ees.hokudai.ac.jp/~kubo/ce/IwanamiBook.html][久保拓弥, データ解析のための統計モデリング入門, 岩波書店, 2012. （通称緑本）]] を Python で書いていく練習の5回目は，第6章の GLM の応用範囲を広げるです。 くわしくは [[https://github.com/tnoda/midorihon-in-python]]


#+begin_src ipython
  %matplotlib inline
  import matplotlib
  matplotlib.rcParams['text.usetex'] = True
  matplotlib.rcParams['text.latex.unicode'] = True
  import matplotlib.pyplot as plt
  plt.style.use('ggplot')
#+end_src

* 第6章 GLM の応用範囲をひろげる

** 6.1 さまざまな種類のデータで応用できる GLM

R の ~glm()~ 系の関数でよく使われる確率分布を Python で整理してみます。
乱数生成は ~np.random~ の関数、 ~GLM()~ の ~family~ 指定は ~statsmodels.genmod.families.family~ のクラスとなります。

| 離散/連続 | 確率分布     | 乱数生成            | GLM() の family 指定 | デフォルトのリンク関数 |
|-----------+--------------+---------------------+----------------------+------------------------|
| 離散      | 二項分布     | binomial()          | Binomial()           | logit                  |
|           | ポアソン分布 | poisson()           | Poisson()            | log                    |
|           | 負の二項分布 | negative_binomial() | NegativeBinomial()   | log                    |
| 連続      | ガンマ分布   | gamma()             | Gamma()              | *inverse*              |
|           | 正規分布     | normal()            | *Gaussian()*         | idntity                |

** 6.2 例題: 上限のあるカウントデータ

それでは例題のデータをながめてみましょう。 Python の中で ~d~ というオブジェクトにデータが格納されているとします。 ~descrive()~ でまとめを表示してみます。


#+NAME: d-describe
#+BEGIN_SRC ipython
  import pandas as pd

  d = pd.read_csv('data4a.csv')
  d.f = d.f.astype('category', ordered=True)
  d.describe()
#+END_SRC

→

#+CALL: d-describe()

#+RESULTS[f2b650eb5296f72a1f7237c2a65b7fb3443acf5f]:
:          N           y           x
: count  100  100.000000  100.000000
: mean     8    5.080000    9.967200
: std      0    2.743882    1.088954
: min      8    0.000000    7.660000
: 25%      8    3.000000    9.337500
: 50%      8    6.000000    9.965000
: 75%      8    8.000000   10.770000
: max      8    8.000000   12.440000

データフレーム ~d~ の ~f~ 列はカテゴリーデータなので ~describe()~ には表示されません。 ~value_counts()~ で個別に表示します。

#+NAME: d-f-value-counts
#+BEGIN_SRC ipython
  d.f.value_counts(sort=False)
#+END_SRC

→

#+CALL: d-f-value-counts()

#+RESULTS[f2b650eb5296f72a1f7237c2a65b7fb3443acf5f]:
: C    50
: T    50
: dtype: int64


統計モデリングに先だって、データをいろいろな方法で図示する必要があります。ここでは簡単に次のように図示してみます。

#+BEGIN_SRC ipython :file ./figs/fig_6-2.png
  fig, ax = plt.subplots(1, 1)
  labels = ['C', 'T']
  dd = [d[d.f == x] for x in labels]
  colors = ['Red', 'Blue']
  for i in range(2):
      dd[i].plot.scatter(x='x', y='y', color=colors[i], label=labels[i], ax=ax)
#+END_SRC

* 第2章 確率分布と統計モデルの最尤推定
  :PROPERTIES:
  :header-args:ipython: :session :exports both
  :END:

Pandas 使います。

#+begin_src ipython
  %matplotlib inline
  import matplotlib.pyplot as P
  from numpy.random import randn
  import numpy as np
  from pandas import Series, DataFrame
  import pandas as pd
  pd.__version__
#+end_src

#+RESULTS:
: '0.16.2'


** .RData データの読み込み

例題データの内容を ~data~ に読み込みます。 .RData を Python で扱うには [[http://rpy.sourceforge.net/][rpy2]] が便利です。

#+BEGIN_SRC ipython
  from rpy2.robjects import r

  r['load']('data.RData')
  r['data']

#+END_SRC

#+RESULTS:
: <FloatVector - Python:0x7f12289c5e18 / R:0x17d62f0>
: [2.000000, 2.000000, 4.000000, ..., 3.000000, 2.000000, 3.000000]


** 2.1 例題: 種子数の統計モデリング

今回は R のデータを Pandas の Series に変換して扱います。

#+BEGIN_SRC ipython
  data = Series(np.array(r['data']))
  data
#+END_SRC

#+RESULTS:
#+begin_example
0     2
1     2
2     4
3     6
4     4
5     5
6     2
7     3
8     1
9     2
10    0
11    4
12    3
13    3
14    3
15    3
16    4
17    2
18    7
19    2
20    4
21    3
22    3
23    3
24    4
25    3
26    7
27    5
28    3
29    1
30    7
31    6
32    4
33    6
34    5
35    2
36    4
37    7
38    2
39    2
40    6
41    2
42    4
43    5
44    4
45    5
46    1
47    3
48    2
49    3
dtype: float64
#+end_example


この ~data~ に含まれるデータの数を確認するには ~len~ 関数を使います。

#+BEGIN_SRC ipython
  len(data)
#+END_SRC

#+RESULTS:
: 50

*** Series.describe()

また ~describe()~ メソッドによって、標本平均や最小値・最大値・四分位数などが分かります。

#+BEGIN_SRC ipython
  data.describe()
#+END_SRC

#+RESULTS:
: count    50.00000
: mean      3.56000
: std       1.72804
: min       0.00000
: 25%       2.00000
: 50%       3.00000
: 75%       4.75000
: max       7.00000
: dtype: float64

上の ~describe()~ の読みかたを少し説明してみましょう。 ~min~ と ~max~ はそれぞれ ~data~ 中の最小値・最大値です。また ~25%~, ~50%~, ~75%~ は、それぞれ ~data~ を小さい順に並べたときの 25%, 50%, 75% 点の値です。出力された観測点そのものではなく、たいていは補間予測された値です。 ~50%~ は標本中央値（中位値）とよばれる推定値、そして、 ~mean~ は標本平均 (sample mean) でいまの場合には 3.56 です。

*** Series.value_counts()

Pandas で度数分布を得る方法はいろいろありますが、ここでは ~value_counts()~ を使ってみましょう。

#+BEGIN_SRC ipython
  data.value_counts()
#+END_SRC

#+RESULTS:
: 3    12
: 2    11
: 4    10
: 5     5
: 7     4
: 6     4
: 1     3
: 0     1
: dtype: int64

これを見ると、一番多いのは種子数 3 で 12 個体、二番目に多いのは種子数 2 で 11 個体というのが分かるのですが、個体数でソートされているので見慣れた度数分布の表にはなっていません。個体数でのソートを避けるには ~sort=False~ オプションを ~value_counts()~ に追加します。

#+BEGIN_SRC ipython
  data.value_counts(sort=False)
#+END_SRC

#+RESULTS:
: 0     1
: 1     3
: 2    11
: 3    12
: 4    10
: 5     5
: 6     4
: 7     4
: dtype: int64

*** Series.hist()

それをヒストグラム (histogram) として図示してみましょう

#+BEGIN_SRC ipython :file ./figs/fig_2-2.png
  P.hist(data, bins=np.arange(-0.5, 8.5, 1.0))
#+END_SRC
#+RESULTS:
[[file:./figs/fig_2-2.png]]

ここで、

#+BEGIN_EXAMPLE
  np.arange(-0.5, 8.5, 1.0)

#+END_EXAMPLE

は、 ${-0.5, 0.5, 1.5, ..., 8.5}$ という数列を生成します。

*** Series.var()

あるデータのばらつき (variability) をあらわす標本統計量の礼として、標本分散 (sample variance) があげられます。

#+BEGIN_SRC ipython
  data.var()
#+END_SRC

#+RESULTS:
: 2.986122448979592

*** Series.sd()

また、標本標準偏差 (sample standard deviation) とは標本分散の平方根です。 Python ではこんなふうに計算できます。

#+BEGIN_SRC ipython
  data.std()
#+END_SRC

#+RESULTS:
: 1.728040060004279

#+BEGIN_SRC ipython
  from math import sqrt

  sqrt(data.var())
#+END_SRC

#+RESULTS:
: 1.728040060004279


** 2.2 データと確率分布の対応関係をながめる
